//
// File generated by rootcint at Wed Dec 10 08:30:11 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SAK_d
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SAK_d.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace sak {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::sak::SaveCuts SaveCuts;
      #else
      class SaveCuts  {
         public:
         //friend XX;
         ::TFile cutfile; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace sak {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void sak_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("sak", 0 /*version*/, "./sak_Canvas.hpp", 10,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &sak_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void sak_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void sakcLcLGate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_sakcLcLGate(void *p = 0);
   static void *newArray_sakcLcLGate(Long_t size, void *p);
   static void delete_sakcLcLGate(void *p);
   static void deleteArray_sakcLcLGate(void *p);
   static void destruct_sakcLcLGate(void *p);
   static Long64_t merge_sakcLcLGate(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sak::Gate*)
   {
      ::sak::Gate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::sak::Gate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("sak::Gate", ::sak::Gate::Class_Version(), "./sak_Gates.hpp", 7,
                  typeid(::sak::Gate), DefineBehavior(ptr, ptr),
                  &::sak::Gate::Dictionary, isa_proxy, 4,
                  sizeof(::sak::Gate) );
      instance.SetNew(&new_sakcLcLGate);
      instance.SetNewArray(&newArray_sakcLcLGate);
      instance.SetDelete(&delete_sakcLcLGate);
      instance.SetDeleteArray(&deleteArray_sakcLcLGate);
      instance.SetDestructor(&destruct_sakcLcLGate);
      instance.SetMerge(&merge_sakcLcLGate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sak::Gate*)
   {
      return GenerateInitInstanceLocal((::sak::Gate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sak::Gate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void sakcLcLLoadCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_sakcLcLLoadCuts(void *p);
   static void deleteArray_sakcLcLLoadCuts(void *p);
   static void destruct_sakcLcLLoadCuts(void *p);
   static void reset_sakcLcLLoadCuts(void *obj, TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sak::LoadCuts*)
   {
      ::sak::LoadCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::sak::LoadCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("sak::LoadCuts", ::sak::LoadCuts::Class_Version(), "./sak_Gates.hpp", 30,
                  typeid(::sak::LoadCuts), DefineBehavior(ptr, ptr),
                  &::sak::LoadCuts::Dictionary, isa_proxy, 4,
                  sizeof(::sak::LoadCuts) );
      instance.SetDelete(&delete_sakcLcLLoadCuts);
      instance.SetDeleteArray(&deleteArray_sakcLcLLoadCuts);
      instance.SetDestructor(&destruct_sakcLcLLoadCuts);
      instance.SetResetAfterMerge(&reset_sakcLcLLoadCuts);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sak::LoadCuts*)
   {
      return GenerateInitInstanceLocal((::sak::LoadCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sak::LoadCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void sakcLcLSaveCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void sakcLcLSaveCuts_Dictionary();
   static void delete_sakcLcLSaveCuts(void *p);
   static void deleteArray_sakcLcLSaveCuts(void *p);
   static void destruct_sakcLcLSaveCuts(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sak::SaveCuts*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::sak::SaveCuts) == sizeof(::ROOT::Shadow::sak::SaveCuts));
      ::sak::SaveCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::sak::SaveCuts),0);
      static ::ROOT::TGenericClassInfo 
         instance("sak::SaveCuts", "./sak_Gates.hpp", 39,
                  typeid(::sak::SaveCuts), DefineBehavior(ptr, ptr),
                  &sakcLcLSaveCuts_ShowMembers, &sakcLcLSaveCuts_Dictionary, isa_proxy, 4,
                  sizeof(::sak::SaveCuts) );
      instance.SetDelete(&delete_sakcLcLSaveCuts);
      instance.SetDeleteArray(&deleteArray_sakcLcLSaveCuts);
      instance.SetDestructor(&destruct_sakcLcLSaveCuts);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sak::SaveCuts*)
   {
      return GenerateInitInstanceLocal((::sak::SaveCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sak::SaveCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void sakcLcLSaveCuts_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::sak::SaveCuts*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void sakcLcLHistogram2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_sakcLcLHistogram2D(void *p = 0);
   static void *newArray_sakcLcLHistogram2D(Long_t size, void *p);
   static void delete_sakcLcLHistogram2D(void *p);
   static void deleteArray_sakcLcLHistogram2D(void *p);
   static void destruct_sakcLcLHistogram2D(void *p);
   static void directoryAutoAdd_sakcLcLHistogram2D(void *obj, TDirectory *dir);
   static Long64_t merge_sakcLcLHistogram2D(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sak::Histogram2D*)
   {
      ::sak::Histogram2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::sak::Histogram2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("sak::Histogram2D", ::sak::Histogram2D::Class_Version(), "./sak_Histograms.hpp", 8,
                  typeid(::sak::Histogram2D), DefineBehavior(ptr, ptr),
                  &::sak::Histogram2D::Dictionary, isa_proxy, 4,
                  sizeof(::sak::Histogram2D) );
      instance.SetNew(&new_sakcLcLHistogram2D);
      instance.SetNewArray(&newArray_sakcLcLHistogram2D);
      instance.SetDelete(&delete_sakcLcLHistogram2D);
      instance.SetDeleteArray(&deleteArray_sakcLcLHistogram2D);
      instance.SetDestructor(&destruct_sakcLcLHistogram2D);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_sakcLcLHistogram2D);
      instance.SetMerge(&merge_sakcLcLHistogram2D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sak::Histogram2D*)
   {
      return GenerateInitInstanceLocal((::sak::Histogram2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sak::Histogram2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void sakcLcLHistogram1D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_sakcLcLHistogram1D(void *p = 0);
   static void *newArray_sakcLcLHistogram1D(Long_t size, void *p);
   static void delete_sakcLcLHistogram1D(void *p);
   static void deleteArray_sakcLcLHistogram1D(void *p);
   static void destruct_sakcLcLHistogram1D(void *p);
   static void directoryAutoAdd_sakcLcLHistogram1D(void *obj, TDirectory *dir);
   static Long64_t merge_sakcLcLHistogram1D(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::sak::Histogram1D*)
   {
      ::sak::Histogram1D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::sak::Histogram1D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("sak::Histogram1D", ::sak::Histogram1D::Class_Version(), "./sak_Histograms.hpp", 17,
                  typeid(::sak::Histogram1D), DefineBehavior(ptr, ptr),
                  &::sak::Histogram1D::Dictionary, isa_proxy, 4,
                  sizeof(::sak::Histogram1D) );
      instance.SetNew(&new_sakcLcLHistogram1D);
      instance.SetNewArray(&newArray_sakcLcLHistogram1D);
      instance.SetDelete(&delete_sakcLcLHistogram1D);
      instance.SetDeleteArray(&deleteArray_sakcLcLHistogram1D);
      instance.SetDestructor(&destruct_sakcLcLHistogram1D);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_sakcLcLHistogram1D);
      instance.SetMerge(&merge_sakcLcLHistogram1D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::sak::Histogram1D*)
   {
      return GenerateInitInstanceLocal((::sak::Histogram1D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sak::Histogram1D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace sak {
//______________________________________________________________________________
TClass *Gate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Gate::Class_Name()
{
   return "sak::Gate";
}

//______________________________________________________________________________
const char *Gate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Gate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Gate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Gate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Gate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Gate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Gate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Gate*)0x0)->GetClass();
   return fgIsA;
}

} // namespace sak
      namespace sak {
//______________________________________________________________________________
TClass *LoadCuts::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LoadCuts::Class_Name()
{
   return "sak::LoadCuts";
}

//______________________________________________________________________________
const char *LoadCuts::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::LoadCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LoadCuts::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::LoadCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LoadCuts::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::LoadCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LoadCuts::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::LoadCuts*)0x0)->GetClass();
   return fgIsA;
}

} // namespace sak
      namespace sak {
//______________________________________________________________________________
TClass *Histogram2D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Histogram2D::Class_Name()
{
   return "sak::Histogram2D";
}

//______________________________________________________________________________
const char *Histogram2D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Histogram2D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Histogram2D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Histogram2D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram2D*)0x0)->GetClass();
   return fgIsA;
}

} // namespace sak
      namespace sak {
//______________________________________________________________________________
TClass *Histogram1D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Histogram1D::Class_Name()
{
   return "sak::Histogram1D";
}

//______________________________________________________________________________
const char *Histogram1D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram1D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Histogram1D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram1D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Histogram1D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram1D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Histogram1D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::sak::Histogram1D*)0x0)->GetClass();
   return fgIsA;
}

} // namespace sak
      namespace sak {
//______________________________________________________________________________
void Gate::Streamer(TBuffer &R__b)
{
   // Stream an object of class sak::Gate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(sak::Gate::Class(),this);
   } else {
      R__b.WriteClassBuffer(sak::Gate::Class(),this);
   }
}

} // namespace sak
//______________________________________________________________________________
      namespace sak {
void Gate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class sak::Gate.
      TClass *R__cl = ::sak::Gate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*aptr", &aptr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bptr", &bptr);
      TCutG::ShowMembers(R__insp);
}

} // namespace sak
namespace ROOT {
   // Wrappers around operator new
   static void *new_sakcLcLGate(void *p) {
      return  p ? new(p) ::sak::Gate : new ::sak::Gate;
   }
   static void *newArray_sakcLcLGate(Long_t nElements, void *p) {
      return p ? new(p) ::sak::Gate[nElements] : new ::sak::Gate[nElements];
   }
   // Wrapper around operator delete
   static void delete_sakcLcLGate(void *p) {
      delete ((::sak::Gate*)p);
   }
   static void deleteArray_sakcLcLGate(void *p) {
      delete [] ((::sak::Gate*)p);
   }
   static void destruct_sakcLcLGate(void *p) {
      typedef ::sak::Gate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_sakcLcLGate(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::sak::Gate*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::sak::Gate

      namespace sak {
//______________________________________________________________________________
void LoadCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class sak::LoadCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(sak::LoadCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(sak::LoadCuts::Class(),this);
   }
}

} // namespace sak
//______________________________________________________________________________
      namespace sak {
void LoadCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class sak::LoadCuts.
      TClass *R__cl = ::sak::LoadCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      TFile::ShowMembers(R__insp);
}

} // namespace sak
namespace ROOT {
   // Wrapper around operator delete
   static void delete_sakcLcLLoadCuts(void *p) {
      delete ((::sak::LoadCuts*)p);
   }
   static void deleteArray_sakcLcLLoadCuts(void *p) {
      delete [] ((::sak::LoadCuts*)p);
   }
   static void destruct_sakcLcLLoadCuts(void *p) {
      typedef ::sak::LoadCuts current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the Reset function.
   static void reset_sakcLcLLoadCuts(void *obj,TFileMergeInfo *info) {
      ((::sak::LoadCuts*)obj)->ResetAfterMerge(info);
   }
} // end of namespace ROOT for class ::sak::LoadCuts

//______________________________________________________________________________
namespace ROOT {
   void sakcLcLSaveCuts_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class sak::SaveCuts.
      typedef ::ROOT::Shadow::sak::SaveCuts ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::sak::SaveCuts*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutfile", &sobj->cutfile);
      R__insp.InspectMember(sobj->cutfile, "cutfile.");
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_sakcLcLSaveCuts(void *p) {
      delete ((::sak::SaveCuts*)p);
   }
   static void deleteArray_sakcLcLSaveCuts(void *p) {
      delete [] ((::sak::SaveCuts*)p);
   }
   static void destruct_sakcLcLSaveCuts(void *p) {
      typedef ::sak::SaveCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::sak::SaveCuts

      namespace sak {
//______________________________________________________________________________
void Histogram2D::Streamer(TBuffer &R__b)
{
   // Stream an object of class sak::Histogram2D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(sak::Histogram2D::Class(),this);
   } else {
      R__b.WriteClassBuffer(sak::Histogram2D::Class(),this);
   }
}

} // namespace sak
//______________________________________________________________________________
      namespace sak {
void Histogram2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class sak::Histogram2D.
      TClass *R__cl = ::sak::Histogram2D::IsA();
      if (R__cl || R__insp.IsA()) { }
      TH2D::ShowMembers(R__insp);
}

} // namespace sak
namespace ROOT {
   // Wrappers around operator new
   static void *new_sakcLcLHistogram2D(void *p) {
      return  p ? new(p) ::sak::Histogram2D : new ::sak::Histogram2D;
   }
   static void *newArray_sakcLcLHistogram2D(Long_t nElements, void *p) {
      return p ? new(p) ::sak::Histogram2D[nElements] : new ::sak::Histogram2D[nElements];
   }
   // Wrapper around operator delete
   static void delete_sakcLcLHistogram2D(void *p) {
      delete ((::sak::Histogram2D*)p);
   }
   static void deleteArray_sakcLcLHistogram2D(void *p) {
      delete [] ((::sak::Histogram2D*)p);
   }
   static void destruct_sakcLcLHistogram2D(void *p) {
      typedef ::sak::Histogram2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_sakcLcLHistogram2D(void *p, TDirectory *dir) {
      ((::sak::Histogram2D*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_sakcLcLHistogram2D(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::sak::Histogram2D*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::sak::Histogram2D

      namespace sak {
//______________________________________________________________________________
void Histogram1D::Streamer(TBuffer &R__b)
{
   // Stream an object of class sak::Histogram1D.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(sak::Histogram1D::Class(),this);
   } else {
      R__b.WriteClassBuffer(sak::Histogram1D::Class(),this);
   }
}

} // namespace sak
//______________________________________________________________________________
      namespace sak {
void Histogram1D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class sak::Histogram1D.
      TClass *R__cl = ::sak::Histogram1D::IsA();
      if (R__cl || R__insp.IsA()) { }
      TH1D::ShowMembers(R__insp);
}

} // namespace sak
namespace ROOT {
   // Wrappers around operator new
   static void *new_sakcLcLHistogram1D(void *p) {
      return  p ? new(p) ::sak::Histogram1D : new ::sak::Histogram1D;
   }
   static void *newArray_sakcLcLHistogram1D(Long_t nElements, void *p) {
      return p ? new(p) ::sak::Histogram1D[nElements] : new ::sak::Histogram1D[nElements];
   }
   // Wrapper around operator delete
   static void delete_sakcLcLHistogram1D(void *p) {
      delete ((::sak::Histogram1D*)p);
   }
   static void deleteArray_sakcLcLHistogram1D(void *p) {
      delete [] ((::sak::Histogram1D*)p);
   }
   static void destruct_sakcLcLHistogram1D(void *p) {
      typedef ::sak::Histogram1D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_sakcLcLHistogram1D(void *p, TDirectory *dir) {
      ((::sak::Histogram1D*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_sakcLcLHistogram1D(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::sak::Histogram1D*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::sak::Histogram1D

/********************************************************
* SAK_d.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSAK_d();

extern "C" void G__set_cpp_environmentSAK_d() {
  G__cpp_reset_tagtableSAK_d();
}
#include <new>
extern "C" int G__cpp_dllrevSAK_d() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* sak */
static int G__SAK_d_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) sak::OrCheck(*(sak::GateList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) sak::AndCheck(*(sak::GateList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) sak::NewCanvas(*(TString*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3])
, *(int*) G__Intref(&libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) sak::NewCanvas(*(TString*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) sak::NewCanvas(*(TString*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) sak::NewCanvas(*(TString*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) sak::NewCanvas(*(TString*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::DisplaySpectrum_plus(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::DisplaySpectrum(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::CloseCanvas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sak::GetAllPeaks(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sak::Gate */
static int G__SAK_d_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Gate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Gate[n];
     } else {
       p = new((void*) gvp) sak::Gate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Gate;
     } else {
       p = new((void*) gvp) sak::Gate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Gate* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new sak::Gate(
(double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, *((TCutG*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) sak::Gate(
(double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, *((TCutG*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const sak::Gate*) G__getstructoffset())->Check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::Gate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Gate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) sak::Gate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sak::Gate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sak::Gate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Gate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Gate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Gate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Gate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SAK_d_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sak::Gate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sak::Gate(*(sak::Gate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sak::Gate G__TsakcLcLGate;
static int G__SAK_d_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sak::Gate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sak::Gate*) (soff+(sizeof(sak::Gate)*i)))->~G__TsakcLcLGate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sak::Gate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sak::Gate*) (soff))->~G__TsakcLcLGate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SAK_d_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Gate* dest = (sak::Gate*) G__getstructoffset();
   *dest = *(sak::Gate*) libp->para[0].ref;
   const sak::Gate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sak::LoadCuts */
static int G__SAK_d_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::LoadCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new sak::LoadCuts((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) sak::LoadCuts((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((sak::LoadCuts*) G__getstructoffset())->getCut(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::LoadCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::LoadCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) sak::LoadCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sak::LoadCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sak::LoadCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::LoadCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::LoadCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::LoadCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::LoadCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sak::LoadCuts G__TsakcLcLLoadCuts;
static int G__SAK_d_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sak::LoadCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sak::LoadCuts*) (soff+(sizeof(sak::LoadCuts)*i)))->~G__TsakcLcLLoadCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sak::LoadCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sak::LoadCuts*) (soff))->~G__TsakcLcLLoadCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sak::SaveCuts */
static int G__SAK_d_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::SaveCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new sak::SaveCuts(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) sak::SaveCuts(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLSaveCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((sak::SaveCuts*) G__getstructoffset())->save((TCutG*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sak::SaveCuts G__TsakcLcLSaveCuts;
static int G__SAK_d_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sak::SaveCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sak::SaveCuts*) (soff+(sizeof(sak::SaveCuts)*i)))->~G__TsakcLcLSaveCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sak::SaveCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sak::SaveCuts*) (soff))->~G__TsakcLcLSaveCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sak::Histogram2D */
static int G__SAK_d_275_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Histogram2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Histogram2D[n];
     } else {
       p = new((void*) gvp) sak::Histogram2D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Histogram2D;
     } else {
       p = new((void*) gvp) sak::Histogram2D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Histogram2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new sak::Histogram2D(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) sak::Histogram2D(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::Histogram2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) sak::Histogram2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sak::Histogram2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sak::Histogram2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Histogram2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Histogram2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SAK_d_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sak::Histogram2D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sak::Histogram2D(*(sak::Histogram2D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sak::Histogram2D G__TsakcLcLHistogram2D;
static int G__SAK_d_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sak::Histogram2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sak::Histogram2D*) (soff+(sizeof(sak::Histogram2D)*i)))->~G__TsakcLcLHistogram2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sak::Histogram2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sak::Histogram2D*) (soff))->~G__TsakcLcLHistogram2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sak::Histogram1D */
static int G__SAK_d_276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Histogram1D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Histogram1D[n];
     } else {
       p = new((void*) gvp) sak::Histogram1D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sak::Histogram1D;
     } else {
       p = new((void*) gvp) sak::Histogram1D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sak::Histogram1D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new sak::Histogram1D(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) sak::Histogram1D(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) sak::Histogram1D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram1D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) sak::Histogram1D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      sak::Histogram1D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((sak::Histogram1D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram1D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Histogram1D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sak::Histogram1D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SAK_d_276_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) sak::Histogram1D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SAK_d_276_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sak::Histogram1D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sak::Histogram1D(*(sak::Histogram1D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sak::Histogram1D G__TsakcLcLHistogram1D;
static int G__SAK_d_276_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sak::Histogram1D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sak::Histogram1D*) (soff+(sizeof(sak::Histogram1D)*i)))->~G__TsakcLcLHistogram1D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sak::Histogram1D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sak::Histogram1D*) (soff))->~G__TsakcLcLHistogram1D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* sak */

/* sak::Gate */

/* sak::LoadCuts */

/* sak::SaveCuts */

/* sak::Histogram2D */

/* sak::Histogram1D */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSAK_d {
 public:
  G__Sizep2memfuncSAK_d(): p(&G__Sizep2memfuncSAK_d::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSAK_d::*p)();
};

size_t G__get_sizep2memfuncSAK_d()
{
  G__Sizep2memfuncSAK_d a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSAK_d() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate))) {
     sak::Gate *G__Lderived;
     G__Lderived=(sak::Gate*)0x1000;
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate),G__get_linked_tagnum(&G__SAK_dLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts))) {
     sak::LoadCuts *G__Lderived;
     G__Lderived=(sak::LoadCuts*)0x1000;
     {
       TFile *G__Lpbase=(TFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts),G__get_linked_tagnum(&G__SAK_dLN_TFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TDirectoryFile *G__Lpbase=(TDirectoryFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts),G__get_linked_tagnum(&G__SAK_dLN_TDirectoryFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TDirectory *G__Lpbase=(TDirectory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts),G__get_linked_tagnum(&G__SAK_dLN_TDirectory),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts),G__get_linked_tagnum(&G__SAK_dLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts),G__get_linked_tagnum(&G__SAK_dLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D))) {
     sak::Histogram2D *G__Lderived;
     G__Lderived=(sak::Histogram2D*)0x1000;
     {
       TH2D *G__Lpbase=(TH2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TH2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH2 *G__Lpbase=(TH2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TH2),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),G__get_linked_tagnum(&G__SAK_dLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D))) {
     sak::Histogram1D *G__Lderived;
     G__Lderived=(sak::Histogram1D*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),G__get_linked_tagnum(&G__SAK_dLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSAK_d() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SAK_dLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SAK_dLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<sak::Gate>",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SAK_dLN_reverse_iteratorlEvectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GateList",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GateListRef",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GateListCRef",117,G__get_linked_tagnum(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SAK_dLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SAK_dLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Hist2D",117,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Hist1D",117,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("H2D",117,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("H1D",117,G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D),0,G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* sak */
static void G__setup_memvarsak(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sak));
   {
   G__memvar_setup((void*)(&sak::canvas),85,0,0,G__get_linked_tagnum(&G__SAK_dLN_TCanvas),-1,-1,1,"canvas=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sak::Gate */
static void G__setup_memvarsakcLcLGate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate));
   { sak::Gate *p; p=(sak::Gate*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->aptr)-(long)(p)),68,0,0,-1,-1,-1,1,"aptr=",0,"!");
   G__memvar_setup((void*)((long)(&p->bptr)-(long)(p)),68,0,0,-1,-1,-1,1,"bptr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SAK_dLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sak::LoadCuts */
static void G__setup_memvarsakcLcLLoadCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts));
   { sak::LoadCuts *p; p=(sak::LoadCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SAK_dLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sak::SaveCuts */
static void G__setup_memvarsakcLcLSaveCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLSaveCuts));
   { sak::SaveCuts *p; p=(sak::SaveCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cutfile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SAK_dLN_TFile),-1,-1,1,"cutfile=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sak::Histogram2D */
static void G__setup_memvarsakcLcLHistogram2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D));
   { sak::Histogram2D *p; p=(sak::Histogram2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SAK_dLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sak::Histogram1D */
static void G__setup_memvarsakcLcLHistogram1D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D));
   { sak::Histogram1D *p; p=(sak::Histogram1D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SAK_dLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSAK_d() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncsak(void) {
   /* sak */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sak));
   G__memfunc_setup("OrCheck",671,G__SAK_d_243_0_1, 103, -1, -1, 0, 1, 1, 1, 0, "u 'vector<sak::Gate,allocator<sak::Gate> >' 'sak::GateList' 11 - gl", (char*)NULL, (void*) G__func2void( (bool (*)(const sak::GateList&))(&sak::OrCheck) ), 0);
   G__memfunc_setup("AndCheck",753,G__SAK_d_243_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "u 'vector<sak::Gate,allocator<sak::Gate> >' 'sak::GateList' 11 - gl", (char*)NULL, (void*) G__func2void( (bool (*)(const sak::GateList&))(&sak::AndCheck) ), 0);
   G__memfunc_setup("NewCanvas",902,G__SAK_d_243_0_3, 85, G__get_linked_tagnum(&G__SAK_dLN_TCanvas), -1, 0, 5, 1, 1, 0, 
"u 'TString' - 11 - name i - - 11 '600' width "
"i - - 11 '600' height i - - 11 '1' divisionx "
"i - - 11 '1' divisiony", (char*)NULL, (void*) G__func2void( (TCanvas* (*)(const TString&, const int&, const int&, const int&, const int&))(&sak::NewCanvas) ), 0);
   G__memfunc_setup("DisplaySpectrum_plus",2124,G__SAK_d_243_0_4, 85, G__get_linked_tagnum(&G__SAK_dLN_TPad), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - a u 'TString' - 11 - opt", (char*)NULL, (void*) G__func2void( (TPad* (*)(const TString&, const TString&))(&sak::DisplaySpectrum_plus) ), 0);
   G__memfunc_setup("DisplaySpectrum",1577,G__SAK_d_243_0_5, 85, G__get_linked_tagnum(&G__SAK_dLN_TPad), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - a u 'TString' - 11 - opt", (char*)NULL, (void*) G__func2void( (TPad* (*)(const TString&, const TString&))(&sak::DisplaySpectrum) ), 0);
   G__memfunc_setup("CloseCanvas",1106,G__SAK_d_243_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::CloseCanvas) ), 0);
   G__memfunc_setup("GetAllPeaks",1069,G__SAK_d_243_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - module", (char*)NULL, (void*) G__func2void( (void (*)(const string&))(&sak::GetAllPeaks) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsakcLcLGate(void) {
   /* sak::Gate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate));
   G__memfunc_setup("Gate",385,G__SAK_d_244_0_1, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gate",385,G__SAK_d_244_0_2, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate), -1, 0, 3, 1, 1, 0, 
"D - - 0 - a D - - 0 - b "
"u 'TCutG' - 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Check",478,G__SAK_d_244_0_3, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SAK_d_244_0_4, 85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&sak::Gate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SAK_d_244_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Gate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SAK_d_244_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&sak::Gate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SAK_d_244_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&sak::Gate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SAK_d_244_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SAK_d_244_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Gate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SAK_d_244_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Gate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SAK_d_244_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Gate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SAK_d_244_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Gate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Gate", 385, G__SAK_d_244_0_16, (int) ('i'), G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate), -1, 0, 1, 1, 1, 0, "u 'sak::Gate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Gate", 511, G__SAK_d_244_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SAK_d_244_0_18, (int) ('u'), G__get_linked_tagnum(&G__SAK_dLN_sakcLcLGate), -1, 1, 1, 1, 1, 0, "u 'sak::Gate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsakcLcLLoadCuts(void) {
   /* sak::LoadCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts));
   G__memfunc_setup("LoadCuts",799,G__SAK_d_249_0_1, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLLoadCuts), -1, 0, 1, 1, 1, 0, "C - - 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCut",620,G__SAK_d_249_0_2, 85, G__get_linked_tagnum(&G__SAK_dLN_TCutG), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SAK_d_249_0_3, 85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&sak::LoadCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SAK_d_249_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::LoadCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SAK_d_249_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&sak::LoadCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SAK_d_249_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&sak::LoadCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SAK_d_249_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SAK_d_249_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::LoadCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SAK_d_249_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::LoadCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SAK_d_249_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::LoadCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SAK_d_249_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::LoadCuts::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~LoadCuts", 925, G__SAK_d_249_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsakcLcLSaveCuts(void) {
   /* sak::SaveCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLSaveCuts));
   G__memfunc_setup("SaveCuts",814,G__SAK_d_250_0_1, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLSaveCuts), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("save",431,G__SAK_d_250_0_2, 105, -1, -1, 0, 1, 1, 1, 0, "U 'TCutG' - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SaveCuts", 940, G__SAK_d_250_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsakcLcLHistogram2D(void) {
   /* sak::Histogram2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D));
   G__memfunc_setup("Histogram2D",1060,G__SAK_d_275_0_1, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histogram2D",1060,G__SAK_d_275_0_2, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D), -1, 0, 9, 1, 1, 0, 
"C - - 10 - name C - - 10 - xaxis "
"C - - 10 - yaxis i - - 0 - binx "
"d - - 0 - xmin d - - 0 - xmax "
"i - - 0 - biny d - - 0 - ymin "
"d - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SAK_d_275_0_3, 85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&sak::Histogram2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SAK_d_275_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SAK_d_275_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&sak::Histogram2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SAK_d_275_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&sak::Histogram2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SAK_d_275_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SAK_d_275_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SAK_d_275_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Histogram2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SAK_d_275_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SAK_d_275_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Histogram2D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Histogram2D", 1060, G__SAK_d_275_0_15, (int) ('i'), G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram2D), -1, 0, 1, 1, 1, 0, "u 'sak::Histogram2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Histogram2D", 1186, G__SAK_d_275_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsakcLcLHistogram1D(void) {
   /* sak::Histogram1D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D));
   G__memfunc_setup("Histogram1D",1059,G__SAK_d_276_0_1, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histogram1D",1059,G__SAK_d_276_0_2, 105, G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - xaxis "
"i - - 0 - binx d - - 0 - xmin "
"d - - 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SAK_d_276_0_3, 85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&sak::Histogram1D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SAK_d_276_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram1D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SAK_d_276_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&sak::Histogram1D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SAK_d_276_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&sak::Histogram1D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SAK_dLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SAK_d_276_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SAK_d_276_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram1D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SAK_d_276_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Histogram1D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SAK_d_276_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sak::Histogram1D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SAK_d_276_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&sak::Histogram1D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Histogram1D", 1059, G__SAK_d_276_0_15, (int) ('i'), G__get_linked_tagnum(&G__SAK_dLN_sakcLcLHistogram1D), -1, 0, 1, 1, 1, 0, "u 'sak::Histogram1D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Histogram1D", 1185, G__SAK_d_276_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSAK_d() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSAK_d() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSAK_d() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SAK_dLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SAK_dLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TDirectoryFile = { "TDirectoryFile" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_sak = { "sak" , 110 , -1 };
G__linked_taginfo G__SAK_dLN_sakcLcLGate = { "sak::Gate" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR = { "vector<sak::Gate,allocator<sak::Gate> >" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiterator = { "vector<sak::Gate,allocator<sak::Gate> >::iterator" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_reverse_iteratorlEvectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiteratorgR = { "reverse_iterator<vector<sak::Gate,allocator<sak::Gate> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_sakcLcLLoadCuts = { "sak::LoadCuts" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_sakcLcLSaveCuts = { "sak::SaveCuts" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TArray = { "TArray" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_sakcLcLHistogram2D = { "sak::Histogram2D" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_sakcLcLHistogram1D = { "sak::Histogram1D" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__SAK_dLN_TPad = { "TPad" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSAK_d() {
  G__SAK_dLN_TClass.tagnum = -1 ;
  G__SAK_dLN_TBuffer.tagnum = -1 ;
  G__SAK_dLN_TDirectory.tagnum = -1 ;
  G__SAK_dLN_TMemberInspector.tagnum = -1 ;
  G__SAK_dLN_TObject.tagnum = -1 ;
  G__SAK_dLN_TNamed.tagnum = -1 ;
  G__SAK_dLN_TString.tagnum = -1 ;
  G__SAK_dLN_string.tagnum = -1 ;
  G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SAK_dLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SAK_dLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SAK_dLN_TAttLine.tagnum = -1 ;
  G__SAK_dLN_TAttFill.tagnum = -1 ;
  G__SAK_dLN_TAttMarker.tagnum = -1 ;
  G__SAK_dLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SAK_dLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SAK_dLN_TH1.tagnum = -1 ;
  G__SAK_dLN_TGraph.tagnum = -1 ;
  G__SAK_dLN_TH2.tagnum = -1 ;
  G__SAK_dLN_TCutG.tagnum = -1 ;
  G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SAK_dLN_TFile.tagnum = -1 ;
  G__SAK_dLN_TDirectoryFile.tagnum = -1 ;
  G__SAK_dLN_sak.tagnum = -1 ;
  G__SAK_dLN_sakcLcLGate.tagnum = -1 ;
  G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR.tagnum = -1 ;
  G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiterator.tagnum = -1 ;
  G__SAK_dLN_reverse_iteratorlEvectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SAK_dLN_sakcLcLLoadCuts.tagnum = -1 ;
  G__SAK_dLN_sakcLcLSaveCuts.tagnum = -1 ;
  G__SAK_dLN_TArray.tagnum = -1 ;
  G__SAK_dLN_TArrayD.tagnum = -1 ;
  G__SAK_dLN_TH1D.tagnum = -1 ;
  G__SAK_dLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SAK_dLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SAK_dLN_TH2D.tagnum = -1 ;
  G__SAK_dLN_sakcLcLHistogram2D.tagnum = -1 ;
  G__SAK_dLN_sakcLcLHistogram1D.tagnum = -1 ;
  G__SAK_dLN_TCanvas.tagnum = -1 ;
  G__SAK_dLN_TPad.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSAK_d() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TClass);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TObject);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TString);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_string);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TH1);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TGraph);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TH2);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TCutG);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TFile);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TDirectoryFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sak),0,-1,262144,(char*)NULL,G__setup_memvarsak,G__setup_memfuncsak);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sakcLcLGate),sizeof(sak::Gate),-1,324864,(char*)NULL,G__setup_memvarsakcLcLGate,G__setup_memfuncsakcLcLGate);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_vectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_reverse_iteratorlEvectorlEsakcLcLGatecOallocatorlEsakcLcLGategRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sakcLcLLoadCuts),sizeof(sak::LoadCuts),-1,323584,(char*)NULL,G__setup_memvarsakcLcLLoadCuts,G__setup_memfuncsakcLcLLoadCuts);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sakcLcLSaveCuts),sizeof(sak::SaveCuts),-1,294912,(char*)NULL,G__setup_memvarsakcLcLSaveCuts,G__setup_memfuncsakcLcLSaveCuts);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TArray);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TH1D);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sakcLcLHistogram2D),sizeof(sak::Histogram2D),-1,323840,(char*)NULL,G__setup_memvarsakcLcLHistogram2D,G__setup_memfuncsakcLcLHistogram2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SAK_dLN_sakcLcLHistogram1D),sizeof(sak::Histogram1D),-1,323840,(char*)NULL,G__setup_memvarsakcLcLHistogram1D,G__setup_memfuncsakcLcLHistogram1D);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__SAK_dLN_TPad);
}
extern "C" void G__cpp_setupSAK_d(void) {
  G__check_setup_version(30051515,"G__cpp_setupSAK_d()");
  G__set_cpp_environmentSAK_d();
  G__cpp_setup_tagtableSAK_d();

  G__cpp_setup_inheritanceSAK_d();

  G__cpp_setup_typetableSAK_d();

  G__cpp_setup_memvarSAK_d();

  G__cpp_setup_memfuncSAK_d();
  G__cpp_setup_globalSAK_d();
  G__cpp_setup_funcSAK_d();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSAK_d();
  return;
}
class G__cpp_setup_initSAK_d {
  public:
    G__cpp_setup_initSAK_d() { G__add_setup_func("SAK_d",(G__incsetup)(&G__cpp_setupSAK_d)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSAK_d() { G__remove_setup_func("SAK_d"); }
};
G__cpp_setup_initSAK_d G__cpp_setup_initializerSAK_d;


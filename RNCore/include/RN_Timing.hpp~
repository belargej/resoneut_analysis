#ifndef __RFTIME_H
#define __RFTIME_H

//C and C++ libraries.
#include <iostream>
#include <iomanip>
#include <math.h>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
#include <vector>
#include <memory>

//ROOT libraties
#include <TString.h>
#include <TFile.h>
#include <TMath.h>
#include <TRandom3.h>
#include <TChain.h>
#include <TObject.h>
#include <TLine.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TBranch.h>
#include <TH2.h>
#include <TF1.h>
#include <TRandom3.h>
#include <TPolyLine3D.h>
#include <TVector3.h>

#include "RN_VariableMap.hpp"

namespace rfperiod{
  const static double RFPERIOD(82.474227);
  Double_t RFModulus(double t);

}

class RN_RFTime:public RN_BaseClass{
protected:
  double fTLin;//!
  double fTShift;//!
  double fTo;//!
  //data parameters 
  double fT;

  std::map<int,double> fTable;//!
  Int_t fCurrentRun; //! only look up in table if there is a state change(new run)


public:
  RN_RFTime(std::string name = "rftime");
  ~RN_RFTime(){};

  Double_t T()const;
  Double_t TRaw()const;
  Double_t TWrapped()const;
  Double_t TMod()const;
  Double_t TMod2()const;
  Double32_t TRel(double time) const;

  void SetCalibrations(RN_VariableMap&);
  void InsertHit(const double&);
  void InsertHit(const double&, const int&); //deposit rf hit and run number for setting the rfshift
  void Reset();

  Int_t LoadTable(const std::string&);
  void ClearTable();
  Int_t ChangeRun(const Int_t & currentrun);


  ClassDef(RN_RFTime,2);  
};


typedef std::vector<RN_RFTime> RN_RFCollection;
typedef std::vector<RN_RFTime>::iterator RN_RFCollectionRef;

//fT is protected, so we need a safe way to access the data
inline Double_t RN_RFTime::TRaw() const{
  return fT;
}



/***********************************************************************/
#ifdef __RFTIME_CXX

namespace rfperiod{
  //for situations where we want to wrap around a subtracted spectrum such as (neut.T()- rf.T()).Modulus
  //instead of just wrapping the rf spectrum
  Double32_t RFModulus(double t){
    return (t>0 ? fmod(t,RFPERIOD) : 0);
  }

}

//for calibrating the time into ns
Double_t RN_RFTime::T() const{
  return ( fT > 0 ? ( ( fT * fTLin ) + fTShift ) : 0 );
}

//for getting time relative to the rf 
Double32_t RN_RFTime::TRel(double time) const{
  return ( fT>0 ? rfperiod::RFModulus(time - TMod2()): 0 );
}

//TMod returns the modulus, offset.  This offset is provided
//in the configuration file as tzero and is after calibration into
//ns
Double_t RN_RFTime::TMod() const{
  double time=T();
  if(fT>0 && fTo){
    time = fmod((time - fTo),82.417);
    if (time < 0)
      time+=82.417;
  }
  return time;
}

//TMod2 returns the modulus of fT after calibrating into ns
//82.417ns is the time difference between 2 beam bunches
Double_t RN_RFTime::TMod2() const{
  return ((fT>0) ? fmod(T(),82.417) : 0);
}

//TWrapped just flips the correlation in Time so that it reads from left to right instead of right to left.

Double_t RN_RFTime::TWrapped() const{
  return (fT>0 ? (82.417-TMod()) : 0);  
}



#endif



#endif
